{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  ingredients: [],\n  lowStockCount: 0,\n  loading: false,\n  error: null\n};\nconst inventorySlice = createSlice({\n  name: \"inventory\",\n  initialState,\n  reducers: {\n    setIngredients: (state, action) => {\n      state.ingredients = action.payload.ingredients;\n      state.lowStockCount = action.payload.lowStockCount;\n    },\n    updateIngredient: (state, action) => {\n      const index = state.ingredients.findIndex(ing => ing.id === action.payload.id);\n      if (index !== -1) {\n        state.ingredients[index] = action.payload;\n      }\n    },\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n    setError: (state, action) => {\n      state.error = action.payload;\n    }\n  }\n});\nexport const {\n  setIngredients,\n  updateIngredient,\n  setLoading,\n  setError\n} = inventorySlice.actions;\nexport default inventorySlice.reducer;","map":{"version":3,"names":["createSlice","initialState","ingredients","lowStockCount","loading","error","inventorySlice","name","reducers","setIngredients","state","action","payload","updateIngredient","index","findIndex","ing","id","setLoading","setError","actions","reducer"],"sources":["/media/victor-rony/Trabalho/projectos/Restaurante/client/src/store/slices/inventorySlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Ingredient } from \"../../types\";\n\ninterface InventoryState {\n   ingredients: Ingredient[];\n   lowStockCount: number;\n   loading: boolean;\n   error: string | null;\n}\n\nconst initialState: InventoryState = {\n   ingredients: [],\n   lowStockCount: 0,\n   loading: false,\n   error: null,\n};\n\nconst inventorySlice = createSlice({\n   name: \"inventory\",\n   initialState,\n   reducers: {\n      setIngredients: (state, action: PayloadAction<{ ingredients: Ingredient[]; lowStockCount: number }>) => {\n         state.ingredients = action.payload.ingredients;\n         state.lowStockCount = action.payload.lowStockCount;\n      },\n      updateIngredient: (state, action: PayloadAction<Ingredient>) => {\n         const index = state.ingredients.findIndex((ing) => ing.id === action.payload.id);\n         if (index !== -1) {\n            state.ingredients[index] = action.payload;\n         }\n      },\n      setLoading: (state, action: PayloadAction<boolean>) => {\n         state.loading = action.payload;\n      },\n      setError: (state, action: PayloadAction<string | null>) => {\n         state.error = action.payload;\n      },\n   },\n});\n\nexport const { setIngredients, updateIngredient, setLoading, setError } = inventorySlice.actions;\nexport default inventorySlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAU7D,MAAMC,YAA4B,GAAG;EAClCC,WAAW,EAAE,EAAE;EACfC,aAAa,EAAE,CAAC;EAChBC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACV,CAAC;AAED,MAAMC,cAAc,GAAGN,WAAW,CAAC;EAChCO,IAAI,EAAE,WAAW;EACjBN,YAAY;EACZO,QAAQ,EAAE;IACPC,cAAc,EAAEA,CAACC,KAAK,EAAEC,MAA2E,KAAK;MACrGD,KAAK,CAACR,WAAW,GAAGS,MAAM,CAACC,OAAO,CAACV,WAAW;MAC9CQ,KAAK,CAACP,aAAa,GAAGQ,MAAM,CAACC,OAAO,CAACT,aAAa;IACrD,CAAC;IACDU,gBAAgB,EAAEA,CAACH,KAAK,EAAEC,MAAiC,KAAK;MAC7D,MAAMG,KAAK,GAAGJ,KAAK,CAACR,WAAW,CAACa,SAAS,CAAEC,GAAG,IAAKA,GAAG,CAACC,EAAE,KAAKN,MAAM,CAACC,OAAO,CAACK,EAAE,CAAC;MAChF,IAAIH,KAAK,KAAK,CAAC,CAAC,EAAE;QACfJ,KAAK,CAACR,WAAW,CAACY,KAAK,CAAC,GAAGH,MAAM,CAACC,OAAO;MAC5C;IACH,CAAC;IACDM,UAAU,EAAEA,CAACR,KAAK,EAAEC,MAA8B,KAAK;MACpDD,KAAK,CAACN,OAAO,GAAGO,MAAM,CAACC,OAAO;IACjC,CAAC;IACDO,QAAQ,EAAEA,CAACT,KAAK,EAAEC,MAAoC,KAAK;MACxDD,KAAK,CAACL,KAAK,GAAGM,MAAM,CAACC,OAAO;IAC/B;EACH;AACH,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEH,cAAc;EAAEI,gBAAgB;EAAEK,UAAU;EAAEC;AAAS,CAAC,GAAGb,cAAc,CAACc,OAAO;AAChG,eAAed,cAAc,CAACe,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}