{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst initialState = {\n  orders: [],\n  loading: false,\n  error: null\n};\nconst ordersSlice = createSlice({\n  name: \"orders\",\n  initialState,\n  reducers: {\n    setOrders: (state, action) => {\n      state.orders = action.payload;\n    },\n    addOrder: (state, action) => {\n      state.orders.unshift(action.payload);\n    },\n    updateOrder: (state, action) => {\n      const index = state.orders.findIndex(order => order.id === action.payload.id);\n      if (index !== -1) {\n        state.orders[index] = action.payload;\n      }\n    },\n    setLoading: (state, action) => {\n      state.loading = action.payload;\n    },\n    setError: (state, action) => {\n      state.error = action.payload;\n    }\n  }\n});\nexport const {\n  setOrders,\n  addOrder,\n  updateOrder,\n  setLoading,\n  setError\n} = ordersSlice.actions;\nexport default ordersSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","orders","loading","error","ordersSlice","name","reducers","setOrders","state","action","payload","addOrder","unshift","updateOrder","index","findIndex","order","id","setLoading","setError","actions","reducer"],"sources":["/media/victor-rony/Trabalho/projectos/Restaurante/client/src/store/slices/ordersSlice.ts"],"sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { Order } from \"../../types\";\n\ninterface OrdersState {\n   orders: Order[];\n   loading: boolean;\n   error: string | null;\n}\n\nconst initialState: OrdersState = {\n   orders: [],\n   loading: false,\n   error: null,\n};\n\nconst ordersSlice = createSlice({\n   name: \"orders\",\n   initialState,\n   reducers: {\n      setOrders: (state, action: PayloadAction<Order[]>) => {\n         state.orders = action.payload;\n      },\n      addOrder: (state, action: PayloadAction<Order>) => {\n         state.orders.unshift(action.payload);\n      },\n      updateOrder: (state, action: PayloadAction<Order>) => {\n         const index = state.orders.findIndex((order) => order.id === action.payload.id);\n         if (index !== -1) {\n            state.orders[index] = action.payload;\n         }\n      },\n      setLoading: (state, action: PayloadAction<boolean>) => {\n         state.loading = action.payload;\n      },\n      setError: (state, action: PayloadAction<string | null>) => {\n         state.error = action.payload;\n      },\n   },\n});\n\nexport const { setOrders, addOrder, updateOrder, setLoading, setError } = ordersSlice.actions;\nexport default ordersSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,QAAuB,kBAAkB;AAS7D,MAAMC,YAAyB,GAAG;EAC/BC,MAAM,EAAE,EAAE;EACVC,OAAO,EAAE,KAAK;EACdC,KAAK,EAAE;AACV,CAAC;AAED,MAAMC,WAAW,GAAGL,WAAW,CAAC;EAC7BM,IAAI,EAAE,QAAQ;EACdL,YAAY;EACZM,QAAQ,EAAE;IACPC,SAAS,EAAEA,CAACC,KAAK,EAAEC,MAA8B,KAAK;MACnDD,KAAK,CAACP,MAAM,GAAGQ,MAAM,CAACC,OAAO;IAChC,CAAC;IACDC,QAAQ,EAAEA,CAACH,KAAK,EAAEC,MAA4B,KAAK;MAChDD,KAAK,CAACP,MAAM,CAACW,OAAO,CAACH,MAAM,CAACC,OAAO,CAAC;IACvC,CAAC;IACDG,WAAW,EAAEA,CAACL,KAAK,EAAEC,MAA4B,KAAK;MACnD,MAAMK,KAAK,GAAGN,KAAK,CAACP,MAAM,CAACc,SAAS,CAAEC,KAAK,IAAKA,KAAK,CAACC,EAAE,KAAKR,MAAM,CAACC,OAAO,CAACO,EAAE,CAAC;MAC/E,IAAIH,KAAK,KAAK,CAAC,CAAC,EAAE;QACfN,KAAK,CAACP,MAAM,CAACa,KAAK,CAAC,GAAGL,MAAM,CAACC,OAAO;MACvC;IACH,CAAC;IACDQ,UAAU,EAAEA,CAACV,KAAK,EAAEC,MAA8B,KAAK;MACpDD,KAAK,CAACN,OAAO,GAAGO,MAAM,CAACC,OAAO;IACjC,CAAC;IACDS,QAAQ,EAAEA,CAACX,KAAK,EAAEC,MAAoC,KAAK;MACxDD,KAAK,CAACL,KAAK,GAAGM,MAAM,CAACC,OAAO;IAC/B;EACH;AACH,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEH,SAAS;EAAEI,QAAQ;EAAEE,WAAW;EAAEK,UAAU;EAAEC;AAAS,CAAC,GAAGf,WAAW,CAACgB,OAAO;AAC7F,eAAehB,WAAW,CAACiB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}