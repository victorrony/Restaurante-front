{"ast":null,"code":"import axios from \"axios\";\n// Configuração base do axios\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"/api\";\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\n\n// Interceptor para adicionar token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"token\");\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Interceptor para lidar com respostas\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem(\"token\");\n    window.location.href = \"/login\";\n  }\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authAPI = {\n  login: async credentials => {\n    const response = await api.post(\"/auth/login\", credentials);\n    return response.data;\n  },\n  register: async userData => {\n    const response = await api.post(\"/auth/register\", userData);\n    return response.data.user;\n  },\n  getCurrentUser: async () => {\n    const response = await api.get(\"/auth/me\");\n    return response.data;\n  }\n};\n\n// Menu API\nexport const menuAPI = {\n  getMenuItems: async () => {\n    const response = await api.get(\"/menu\");\n    return response.data;\n  },\n  getCategories: async () => {\n    const response = await api.get(\"/menu/categories\");\n    return response.data;\n  },\n  createMenuItem: async item => {\n    const response = await api.post(\"/menu\", item);\n    return response.data;\n  },\n  updateMenuItem: async (id, item) => {\n    const response = await api.put(`/menu/${id}`, item);\n    return response.data;\n  },\n  deleteMenuItem: async id => {\n    await api.delete(`/menu/${id}`);\n  }\n};\n\n// Orders API\nexport const ordersAPI = {\n  getOrders: async params => {\n    const response = await api.get(\"/orders\", {\n      params\n    });\n    return response.data;\n  },\n  createOrder: async order => {\n    const response = await api.post(\"/orders\", order);\n    return response.data;\n  },\n  updateOrderStatus: async (id, data) => {\n    const response = await api.put(`/orders/${id}/status`, data);\n    return response.data;\n  },\n  updateOrderItemStatus: async (orderId, itemId, data) => {\n    const response = await api.put(`/orders/${orderId}/item/${itemId}/status`, data);\n    return response.data;\n  }\n};\n\n// Tables API\nexport const tablesAPI = {\n  getTables: async () => {\n    const response = await api.get(\"/tables\");\n    return response.data;\n  },\n  createTable: async table => {\n    const response = await api.post(\"/tables\", table);\n    return response.data;\n  },\n  updateTableStatus: async (id, status) => {\n    const response = await api.put(`/tables/${id}/status`, {\n      status\n    });\n    return response.data;\n  },\n  getTableQR: async number => {\n    const response = await api.get(`/tables/${number}/qr`);\n    return response.data;\n  }\n};\n\n// Reservations API\nexport const reservationsAPI = {\n  getReservations: async params => {\n    const response = await api.get(\"/reservations\", {\n      params\n    });\n    return response.data;\n  },\n  createReservation: async reservation => {\n    const response = await api.post(\"/reservations\", reservation);\n    return response.data;\n  },\n  updateReservationStatus: async (id, status) => {\n    const response = await api.put(`/reservations/${id}/status`, {\n      status\n    });\n    return response.data;\n  },\n  checkAvailability: async params => {\n    const response = await api.get(\"/reservations/availability\", {\n      params\n    });\n    return response.data;\n  }\n};\n\n// Inventory API\nexport const inventoryAPI = {\n  getIngredients: async () => {\n    const response = await api.get(\"/inventory\");\n    return response.data;\n  },\n  createIngredient: async ingredient => {\n    const response = await api.post(\"/inventory\", ingredient);\n    return response.data;\n  },\n  updateIngredient: async (id, ingredient) => {\n    const response = await api.put(`/inventory/${id}`, ingredient);\n    return response.data;\n  },\n  updateStock: async (id, data) => {\n    const response = await api.put(`/inventory/${id}/stock`, data);\n    return response.data;\n  },\n  getLowStock: async () => {\n    const response = await api.get(\"/inventory/low-stock\");\n    return response.data;\n  }\n};\n\n// Feedback API\nexport const feedbackAPI = {\n  getFeedbacks: async () => {\n    const response = await api.get(\"/feedback\");\n    return response.data;\n  },\n  createFeedback: async feedback => {\n    const response = await api.post(\"/feedback\", feedback);\n    return response.data;\n  },\n  getStatistics: async period => {\n    const response = await api.get(\"/feedback/statistics\", {\n      params: {\n        period\n      }\n    });\n    return response.data;\n  }\n};\n\n// Reports API\nexport const reportsAPI = {\n  getSalesReport: async params => {\n    const response = await api.get(\"/reports/sales\", {\n      params\n    });\n    return response.data;\n  },\n  getPerformanceReport: async date => {\n    const response = await api.get(\"/reports/performance\", {\n      params: {\n        date\n      }\n    });\n    return response.data;\n  },\n  getInventoryReport: async () => {\n    const response = await api.get(\"/reports/inventory\");\n    return response.data;\n  }\n};\n\n// Users API\nexport const usersAPI = {\n  getUsers: async () => {\n    const response = await api.get(\"/users\");\n    return response.data;\n  },\n  updateUser: async (id, user) => {\n    const response = await api.put(`/users/${id}`, user);\n    return response.data;\n  },\n  deleteUser: async id => {\n    await api.delete(`/users/${id}`);\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","authAPI","login","credentials","post","data","register","userData","user","getCurrentUser","get","menuAPI","getMenuItems","getCategories","createMenuItem","item","updateMenuItem","id","put","deleteMenuItem","delete","ordersAPI","getOrders","params","createOrder","order","updateOrderStatus","updateOrderItemStatus","orderId","itemId","tablesAPI","getTables","createTable","table","updateTableStatus","getTableQR","number","reservationsAPI","getReservations","createReservation","reservation","updateReservationStatus","checkAvailability","inventoryAPI","getIngredients","createIngredient","ingredient","updateIngredient","updateStock","getLowStock","feedbackAPI","getFeedbacks","createFeedback","feedback","getStatistics","period","reportsAPI","getSalesReport","getPerformanceReport","date","getInventoryReport","usersAPI","getUsers","updateUser","deleteUser"],"sources":["/media/victor-rony/Trabalho/projectos/Restaurante/client/src/services/api.ts"],"sourcesContent":["import axios, { AxiosResponse } from \"axios\";\nimport {\n   LoginRequest,\n   LoginResponse,\n   User,\n   MenuItem,\n   Category,\n   Order,\n   CreateOrderRequest,\n   UpdateOrderStatusRequest,\n   Table,\n   Reservation,\n   Ingredient,\n   Feedback,\n} from \"../types\";\n\n// Configuração base do axios\nconst API_BASE_URL = process.env.REACT_APP_API_URL || \"/api\";\n\nconst api = axios.create({\n   baseURL: API_BASE_URL,\n   headers: {\n      \"Content-Type\": \"application/json\",\n   },\n});\n\n// Interceptor para adicionar token\napi.interceptors.request.use(\n   (config) => {\n      const token = localStorage.getItem(\"token\");\n      if (token) {\n         config.headers.Authorization = `Bearer ${token}`;\n      }\n      return config;\n   },\n   (error) => {\n      return Promise.reject(error);\n   }\n);\n\n// Interceptor para lidar com respostas\napi.interceptors.response.use(\n   (response) => response,\n   (error) => {\n      if (error.response?.status === 401) {\n         localStorage.removeItem(\"token\");\n         window.location.href = \"/login\";\n      }\n      return Promise.reject(error);\n   }\n);\n\n// Auth API\nexport const authAPI = {\n   login: async (credentials: LoginRequest): Promise<LoginResponse> => {\n      const response: AxiosResponse<LoginResponse> = await api.post(\"/auth/login\", credentials);\n      return response.data;\n   },\n\n   register: async (userData: Omit<User, \"id\" | \"createdAt\" | \"active\"> & { password: string }): Promise<User> => {\n      const response: AxiosResponse<{ user: User }> = await api.post(\"/auth/register\", userData);\n      return response.data.user;\n   },\n\n   getCurrentUser: async (): Promise<User> => {\n      const response: AxiosResponse<User> = await api.get(\"/auth/me\");\n      return response.data;\n   },\n};\n\n// Menu API\nexport const menuAPI = {\n   getMenuItems: async (): Promise<MenuItem[]> => {\n      const response: AxiosResponse<MenuItem[]> = await api.get(\"/menu\");\n      return response.data;\n   },\n\n   getCategories: async (): Promise<Category[]> => {\n      const response: AxiosResponse<Category[]> = await api.get(\"/menu/categories\");\n      return response.data;\n   },\n\n   createMenuItem: async (item: Omit<MenuItem, \"id\" | \"category\">): Promise<MenuItem> => {\n      const response: AxiosResponse<MenuItem> = await api.post(\"/menu\", item);\n      return response.data;\n   },\n\n   updateMenuItem: async (id: string, item: Partial<MenuItem>): Promise<MenuItem> => {\n      const response: AxiosResponse<MenuItem> = await api.put(`/menu/${id}`, item);\n      return response.data;\n   },\n\n   deleteMenuItem: async (id: string): Promise<void> => {\n      await api.delete(`/menu/${id}`);\n   },\n};\n\n// Orders API\nexport const ordersAPI = {\n   getOrders: async (params?: { status?: string; tableId?: string }): Promise<Order[]> => {\n      const response: AxiosResponse<Order[]> = await api.get(\"/orders\", { params });\n      return response.data;\n   },\n\n   createOrder: async (order: CreateOrderRequest): Promise<Order> => {\n      const response: AxiosResponse<Order> = await api.post(\"/orders\", order);\n      return response.data;\n   },\n\n   updateOrderStatus: async (id: string, data: UpdateOrderStatusRequest): Promise<Order> => {\n      const response: AxiosResponse<Order> = await api.put(`/orders/${id}/status`, data);\n      return response.data;\n   },\n\n   updateOrderItemStatus: async (orderId: string, itemId: string, data: UpdateOrderStatusRequest): Promise<any> => {\n      const response: AxiosResponse<any> = await api.put(`/orders/${orderId}/item/${itemId}/status`, data);\n      return response.data;\n   },\n};\n\n// Tables API\nexport const tablesAPI = {\n   getTables: async (): Promise<Table[]> => {\n      const response: AxiosResponse<Table[]> = await api.get(\"/tables\");\n      return response.data;\n   },\n\n   createTable: async (table: Omit<Table, \"id\" | \"qrCode\">): Promise<Table> => {\n      const response: AxiosResponse<Table> = await api.post(\"/tables\", table);\n      return response.data;\n   },\n\n   updateTableStatus: async (id: string, status: Table[\"status\"]): Promise<Table> => {\n      const response: AxiosResponse<Table> = await api.put(`/tables/${id}/status`, { status });\n      return response.data;\n   },\n\n   getTableQR: async (number: number): Promise<{ qrCode: string }> => {\n      const response: AxiosResponse<{ qrCode: string }> = await api.get(`/tables/${number}/qr`);\n      return response.data;\n   },\n};\n\n// Reservations API\nexport const reservationsAPI = {\n   getReservations: async (params?: { date?: string; status?: string }): Promise<Reservation[]> => {\n      const response: AxiosResponse<Reservation[]> = await api.get(\"/reservations\", { params });\n      return response.data;\n   },\n\n   createReservation: async (reservation: Omit<Reservation, \"id\" | \"createdAt\" | \"user\">): Promise<Reservation> => {\n      const response: AxiosResponse<Reservation> = await api.post(\"/reservations\", reservation);\n      return response.data;\n   },\n\n   updateReservationStatus: async (id: string, status: Reservation[\"status\"]): Promise<Reservation> => {\n      const response: AxiosResponse<Reservation> = await api.put(`/reservations/${id}/status`, { status });\n      return response.data;\n   },\n\n   checkAvailability: async (params: { date: string; time: string; guests: number }): Promise<Table[]> => {\n      const response: AxiosResponse<Table[]> = await api.get(\"/reservations/availability\", { params });\n      return response.data;\n   },\n};\n\n// Inventory API\nexport const inventoryAPI = {\n   getIngredients: async (): Promise<{\n      ingredients: Ingredient[];\n      lowStockCount: number;\n      lowStockIngredients: Ingredient[];\n   }> => {\n      const response = await api.get(\"/inventory\");\n      return response.data;\n   },\n\n   createIngredient: async (ingredient: Omit<Ingredient, \"id\">): Promise<Ingredient> => {\n      const response: AxiosResponse<Ingredient> = await api.post(\"/inventory\", ingredient);\n      return response.data;\n   },\n\n   updateIngredient: async (id: string, ingredient: Partial<Ingredient>): Promise<Ingredient> => {\n      const response: AxiosResponse<Ingredient> = await api.put(`/inventory/${id}`, ingredient);\n      return response.data;\n   },\n\n   updateStock: async (id: string, data: { quantity: number; operation: \"add\" | \"subtract\" }): Promise<Ingredient> => {\n      const response: AxiosResponse<Ingredient> = await api.put(`/inventory/${id}/stock`, data);\n      return response.data;\n   },\n\n   getLowStock: async (): Promise<Ingredient[]> => {\n      const response: AxiosResponse<Ingredient[]> = await api.get(\"/inventory/low-stock\");\n      return response.data;\n   },\n};\n\n// Feedback API\nexport const feedbackAPI = {\n   getFeedbacks: async (): Promise<{ feedbacks: Feedback[]; statistics: any }> => {\n      const response = await api.get(\"/feedback\");\n      return response.data;\n   },\n\n   createFeedback: async (feedback: Omit<Feedback, \"id\" | \"createdAt\" | \"user\">): Promise<Feedback> => {\n      const response: AxiosResponse<Feedback> = await api.post(\"/feedback\", feedback);\n      return response.data;\n   },\n\n   getStatistics: async (period?: string): Promise<any> => {\n      const response = await api.get(\"/feedback/statistics\", { params: { period } });\n      return response.data;\n   },\n};\n\n// Reports API\nexport const reportsAPI = {\n   getSalesReport: async (params: { startDate?: string; endDate?: string; period?: string }): Promise<any> => {\n      const response = await api.get(\"/reports/sales\", { params });\n      return response.data;\n   },\n\n   getPerformanceReport: async (date?: string): Promise<any> => {\n      const response = await api.get(\"/reports/performance\", { params: { date } });\n      return response.data;\n   },\n\n   getInventoryReport: async (): Promise<any> => {\n      const response = await api.get(\"/reports/inventory\");\n      return response.data;\n   },\n};\n\n// Users API\nexport const usersAPI = {\n   getUsers: async (): Promise<User[]> => {\n      const response: AxiosResponse<User[]> = await api.get(\"/users\");\n      return response.data;\n   },\n\n   updateUser: async (id: string, user: Partial<User>): Promise<User> => {\n      const response: AxiosResponse<User> = await api.put(`/users/${id}`, user);\n      return response.data;\n   },\n\n   deleteUser: async (id: string): Promise<void> => {\n      await api.delete(`/users/${id}`);\n   },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}