// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  RECEPCIONISTA
  COZINHEIRA
}

enum OrderStatus {
  PENDENTE
  EM_PREPARACAO
  PRONTO
  SERVIDO
  CANCELADO
}

enum TableStatus {
  LIVRE
  OCUPADA
  RESERVADA
  MANUTENCAO
}

enum PaymentMethod {
  DINHEIRO
  CARTAO_CREDITO
  CARTAO_DEBITO
  PIX
  VALE_REFEICAO
}

enum PaymentStatus {
  PENDENTE
  PAGO
  CANCELADO
}

enum ReservationStatus {
  CONFIRMADA
  CANCELADA
  FINALIZADA
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  orders       Order[]
  reservations Reservation[]
  feedbacks    Feedback[]

  @@map("users")
}

model Category {
  id          String @id @default(cuid())
  name        String
  description String?
  active      Boolean @default(true)
  order       Int?

  // Relacionamentos
  menuItems MenuItem[]

  @@map("categories")
}

model MenuItem {
  id          String  @id @default(cuid())
  name        String
  description String?
  price       Decimal @db.Decimal(10, 2)
  image       String?
  available   Boolean @default(true)
  preparationTime Int? // em minutos
  // Flags para uso em montagem de refeição personalizada
  isBase           Boolean @default(false)
  isProteina       Boolean @default(false)
  isAcompanhamento Boolean @default(false)
  isBebida         Boolean @default(false)
  
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  // Relacionamentos
  orderItems    OrderItem[]
  ingredients   MenuItemIngredient[]

  @@map("menu_items")
}

model Ingredient {
  id          String  @id @default(cuid())
  name        String
  unit        String  // kg, litros, unidades, etc.
  stockQty    Decimal @db.Decimal(10, 3)
  minStockQty Decimal @db.Decimal(10, 3)
  cost        Decimal @db.Decimal(10, 2)

  // Relacionamentos
  menuItems MenuItemIngredient[]

  @@map("ingredients")
}

model MenuItemIngredient {
  id           String @id @default(cuid())
  quantity     Decimal @db.Decimal(10, 3)
  
  menuItemId   String
  menuItem     MenuItem @relation(fields: [menuItemId], references: [id])
  
  ingredientId String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])

  @@unique([menuItemId, ingredientId])
  @@map("menu_item_ingredients")
}

model Table {
  id          String      @id @default(cuid())
  number      Int         @unique
  capacity    Int
  status      TableStatus @default(LIVRE)
  qrCode      String?     @unique
  
  // Relacionamentos
  orders       Order[]
  reservations Reservation[]

  @@map("tables")
}

model Order {
  id          String      @id @default(cuid())
  orderNumber String      @unique
  status      OrderStatus @default(PENDENTE)
  totalAmount Decimal     @db.Decimal(10, 2)
  notes       String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  tableId String
  table   Table  @relation(fields: [tableId], references: [id])
  
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Relacionamentos
  orderItems OrderItem[]
  payments   Payment[]

  @@map("orders")
}

model OrderItem {
  id       String  @id @default(cuid())
  quantity Int
  price    Decimal @db.Decimal(10, 2)
  notes    String?
  status   OrderStatus @default(PENDENTE)
  
  orderId    String
  order      Order @relation(fields: [orderId], references: [id])
  
  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])

  @@map("order_items")
}

model Payment {
  id            String        @id @default(cuid())
  amount        Decimal       @db.Decimal(10, 2)
  method        PaymentMethod
  status        PaymentStatus @default(PENDENTE)
  transactionId String?
  createdAt     DateTime      @default(now())
  
  orderId String
  order   Order  @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model Reservation {
  id          String            @id @default(cuid())
  date        DateTime
  time        String
  guests      Int
  customerName String
  customerPhone String
  customerEmail String?
  status      ReservationStatus @default(CONFIRMADA)
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  tableId String
  table   Table  @relation(fields: [tableId], references: [id])
  
  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  @@map("reservations")
}

model Feedback {
  id          String   @id @default(cuid())
  rating      Int      // 1-5
  comment     String?
  serviceRating Int?   // 1-5
  foodRating    Int?   // 1-5
  createdAt   DateTime @default(now())
  
  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  @@map("feedbacks")
}
